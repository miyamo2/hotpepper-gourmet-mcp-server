// Code generated by mcp-codegen. DO NOT EDIT.
package mcpgen

import (
	"context"
	"encoding/json"
	"fmt"
	"slices"

	mcp "github.com/ktr0731/go-mcp"
	"github.com/ktr0731/go-mcp/protocol"
)

// ServerPromptHandler is the interface for prompt handlers.
type ServerPromptHandler interface {
}

// ResourceTemplateList contains all available ResourceTemplates.
var ResourceTemplateList = []mcp.ResourceTemplate{
	{
		URITemplate: "https://webservice.recruit.co.jp/hotpepper/budget/v1/",
		Name:        "dinner_budget_master",
		Description: "dinner_budget_master",
		MimeType:    "application/json",
	},
	{
		URITemplate: "https://webservice.recruit.co.jp/hotpepper/large_service_area/v1/",
		Name:        "large_service_area_master",
		Description: "large_service_area_master",
		MimeType:    "application/json",
	},
	{
		URITemplate: "https://webservice.recruit.co.jp/hotpepper/service_area/v1/",
		Name:        "service_area_master",
		Description: "service_area_master",
		MimeType:    "application/json",
	},
	{
		URITemplate: "https://webservice.recruit.co.jp/hotpepper/credit_card/v1/",
		Name:        "credit_card_master",
		Description: "credit_card_master",
		MimeType:    "application/json",
	},
}

// ServerToolHandler is the interface for tool handlers.
type ServerToolHandler interface {
	HandleToolGourmetSearch(ctx context.Context, req *ToolGourmetSearchRequest) (*mcp.CallToolResult, error)
	HandleToolShopSearch(ctx context.Context, req *ToolShopSearchRequest) (*mcp.CallToolResult, error)
	HandleToolLargeAreaSearch(ctx context.Context, req *ToolLargeAreaSearchRequest) (*mcp.CallToolResult, error)
	HandleToolMiddleAreaSearch(ctx context.Context, req *ToolMiddleAreaSearchRequest) (*mcp.CallToolResult, error)
	HandleToolSmallAreaSearch(ctx context.Context, req *ToolSmallAreaSearchRequest) (*mcp.CallToolResult, error)
	HandleToolGenreSearch(ctx context.Context, req *ToolGenreSearchRequest) (*mcp.CallToolResult, error)
	HandleToolDinnerBudgetMasterSearch(ctx context.Context, req *ToolDinnerBudgetMasterSearchRequest) (*mcp.CallToolResult, error)
	HandleToolLargeServiceAreaMasterSearch(ctx context.Context, req *ToolLargeServiceAreaMasterSearchRequest) (*mcp.CallToolResult, error)
	HandleToolServiceAreaMasterSearch(ctx context.Context, req *ToolServiceAreaMasterSearchRequest) (*mcp.CallToolResult, error)
	HandleToolCreditCardMasterSearch(ctx context.Context, req *ToolCreditCardMasterSearchRequest) (*mcp.CallToolResult, error)
}

// ToolGourmetSearchRequest contains input parameters for the gourmet_search tool.
type ToolGourmetSearchRequest struct {
	ID               []string `json:"id,omitempty"`
	Name             *string  `json:"name,omitempty"`
	NameKana         *string  `json:"name_kana,omitempty"`
	NameAny          *string  `json:"name_any,omitempty"`
	Tel              *string  `json:"tel,omitempty"`
	Address          *string  `json:"address,omitempty"`
	Keyword          []string `json:"keyword,omitempty"`
	LargeServiceArea *string  `json:"large_service_area,omitempty"`
	ServiceArea      []string `json:"service_area,omitempty"`
	LargeArea        []string `json:"large_area,omitempty"`
	MiddleArea       []string `json:"middle_area,omitempty"`
	SmallArea        []string `json:"small_area,omitempty"`
	Latitude         *float64 `json:"lat,omitempty"`
	Longitude        *float64 `json:"lng,omitempty"`
	Range            *uint8   `json:"range,omitempty"`
	Datum            *string  `json:"datum,omitempty"`
	Genre            []string `json:"genre,omitempty"`
	Budget           []string `json:"budget,omitempty"`
	PartyCapacity    *uint    `json:"party_capacity,omitempty"`
	KtaiCoupon       bool     `json:"ktai_coupon,omitempty"`
	Wifi             bool     `json:"wifi,omitempty"`
	Wedding          bool     `json:"wedding,omitempty"`
	Course           bool     `json:"course,omitempty"`
	FreeDrink        bool     `json:"free_drink,omitempty"`
	FreeFood         bool     `json:"free_food,omitempty"`
	PrivateRoom      bool     `json:"private_room,omitempty"`
	Horigotatsu      bool     `json:"horigotatsu,omitempty"`
	Tatami           bool     `json:"tatami,omitempty"`
	Cocktail         bool     `json:"cocktail,omitempty"`
	Shochu           bool     `json:"shochu,omitempty"`
	Sake             bool     `json:"sake,omitempty"`
	Wine             bool     `json:"wine,omitempty"`
	Card             bool     `json:"card,omitempty"`
	NonSmoking       bool     `json:"non_smoking,omitempty"`
	Charter          bool     `json:"charter,omitempty"`
	Ktai             bool     `json:"ktai,omitempty"`
	Parking          bool     `json:"parking,omitempty"`
	BarrierFree      bool     `json:"barrier_free,omitempty"`
	Sommelier        bool     `json:"sommelier,omitempty"`
	NightView        bool     `json:"night_view,omitempty"`
	OpenAir          bool     `json:"open_air,omitempty"`
	Show             bool     `json:"show,omitempty"`
	Equipment        bool     `json:"equipment,omitempty"`
	Karaoke          bool     `json:"karaoke,omitempty"`
	Band             bool     `json:"band,omitempty"`
	TV               bool     `json:"tv,omitempty"`
	Lunch            bool     `json:"lunch,omitempty"`
	Midnight         bool     `json:"midnight,omitempty"`
	MidnightMeal     bool     `json:"midnight_meal,omitempty"`
	English          bool     `json:"english,omitempty"`
	Pet              bool     `json:"pet,omitempty"`
	Child            bool     `json:"child,omitempty"`
	CreditCard       []string `json:"credit_card,omitempty"`
	Order            *uint8   `json:"order,omitempty"`
	Start            *uint    `json:"start,omitempty"`
	Count            *uint8   `json:"count,omitempty"`
}

// ToolShopSearchRequest contains input parameters for the shop_search tool.
type ToolShopSearchRequest struct {
	Keyword []string `json:"keyword,omitempty"`
	Tel     *string  `json:"tel,omitempty"`
	Start   *uint    `json:"start,omitempty"`
	Count   *uint8   `json:"count,omitempty"`
}

// ToolLargeAreaSearchRequest contains input parameters for the large_area_search tool.
type ToolLargeAreaSearchRequest struct {
	LargeArea []string `json:"large_area,omitempty"`
	Keyword   []string `json:"keyword,omitempty"`
}

// ToolMiddleAreaSearchRequest contains input parameters for the middle_area_search tool.
type ToolMiddleAreaSearchRequest struct {
	MiddleArea []string `json:"middle_area,omitempty"`
	LargeArea  []string `json:"large_area,omitempty"`
	Keyword    []string `json:"keyword,omitempty"`
	Start      *uint    `json:"start,omitempty"`
	Count      *uint8   `json:"count,omitempty"`
}

// ToolSmallAreaSearchRequest contains input parameters for the small_area_search tool.
type ToolSmallAreaSearchRequest struct {
	SmallArea  []string `json:"small_area,omitempty"`
	MiddleArea []string `json:"middle_area,omitempty"`
	Keyword    []string `json:"keyword,omitempty"`
	Start      *uint    `json:"start,omitempty"`
	Count      *uint8   `json:"count,omitempty"`
}

// ToolGenreSearchRequest contains input parameters for the genre_search tool.
type ToolGenreSearchRequest struct {
	Code    []string `json:"code,omitempty"`
	Keyword []string `json:"keyword,omitempty"`
}

// ToolDinnerBudgetMasterSearchRequest contains input parameters for the dinner_budget_master_search tool.
type ToolDinnerBudgetMasterSearchRequest struct {
	Start *uint `json:"start,omitempty"`
	Count *uint `json:"count,omitempty"`
}

// ToolLargeServiceAreaMasterSearchRequest contains input parameters for the large_service_area_master_search tool.
type ToolLargeServiceAreaMasterSearchRequest struct {
	Start *uint `json:"start,omitempty"`
	Count *uint `json:"count,omitempty"`
}

// ToolServiceAreaMasterSearchRequest contains input parameters for the service_area_master_search tool.
type ToolServiceAreaMasterSearchRequest struct {
	Start *uint `json:"start,omitempty"`
	Count *uint `json:"count,omitempty"`
}

// ToolCreditCardMasterSearchRequest contains input parameters for the credit_card_master_search tool.
type ToolCreditCardMasterSearchRequest struct {
	Start *uint `json:"start,omitempty"`
	Count *uint `json:"count,omitempty"`
}

// PromptList contains all available prompts.
var PromptList = []protocol.Prompt{}

// JSON Schema type definitions generated from inputSchema
var (
	ToolGourmetSearchInputSchema                = json.RawMessage(`{"properties":{"id":{"items":{"type":"string","examples":["J999999999"]},"type":"array","title":"Store ID","description":"Search by the code assigned to the store. Up to 20 can be specified."},"name":{"type":"string","title":"Store Name","description":"Search by the store name (partial match)."},"name_kana":{"type":"string","title":"Store Name Kana","description":"Search by the store's phonetic name (partial match)."},"name_any":{"type":"string","title":"Store Name OR Kana","description":"Search across both store name and phonetic name with an OR condition (partial match)."},"tel":{"type":"string","pattern":"^\\d{9}(\\d|\\d{2})?$","title":"Phone Number","description":"Search by the store's phone number. Digits only (no hyphens)."},"address":{"type":"string","title":"Address","description":"Search by the store's address (partial match)."},"keyword":{"items":{"type":"string"},"type":"array","title":"Keyword","description":"Free-text search across store name kana"},"large_service_area":{"type":"string","title":"Large Service Area Code","description":"Search by the code number assigned to the area. Refer to the Large Service Area master for possible codes."},"service_area":{"items":{"type":"string"},"type":"array","title":"Service Area Code","description":"Up to 3 entries allowed. Refer to the Service Area master for possible codes."},"large_area":{"items":{"type":"string"},"type":"array","title":"Large Area Code","description":"Up to 3 entries allowed. Refer to the Large Area master for possible codes."},"middle_area":{"items":{"type":"string"},"type":"array","title":"Middle Area Code","description":"Up to 5 entries allowed. Refer to the Middle Area master for possible codes."},"small_area":{"items":{"type":"string"},"type":"array","title":"Small Area Code","description":"Up to 5 entries allowed. Refer to the Small Area master for possible codes."},"lat":{"type":"number","title":"Latitude","description":"Used if searching for stores within a certain distance from a given point."},"lng":{"type":"number","title":"Longitude","description":"Used if searching for stores within a certain distance from a given point."},"range":{"type":"integer","title":"Search Range","description":"Specifies a range in 5 levels for distance-based searching from a given point. For example","examples":[1]},"datum":{"type":"string","title":"Geodetic System","description":"Specifies the geodetic system for latitude and longitude. 'world' for World Geodetic System"},"genre":{"items":{"type":"string"},"type":"array","title":"Store Genre Code","description":"Can filter by the store's genre (including sub-genres). Refer to the Genre master for valid codes."},"budget":{"items":{"type":"string"},"type":"array","title":"Dinner Budget Code for Search","description":"Can filter by dinner budget. Refer to the Dinner Budget master for valid codes."},"party_capacity":{"type":"integer","title":"Party Capacity","description":"Can filter by party capacity. Finds stores with capacity larger than the specified number."},"ktai_coupon":{"type":"boolean","title":"Mobile Coupon Availability","description":"Specifies whether to filter by mobile coupons. true=filter false=do not filter"},"wifi":{"type":"boolean","title":"WiFi Availability","description":"Specifies whether to filter by stores offering internet access via WiFi. true=filter false=do not filter"},"wedding":{"type":"boolean","title":"Wedding/After-Parties","description":"Specifies whether to filter by stores that accept wedding/after-party inquiries. true=filter false=do not filter"},"course":{"type":"boolean","title":"Courses","description":"Specifies whether to filter by stores offering course meals. true=filter false=do not filter"},"free_drink":{"type":"boolean","title":"All-You-Can-Drink","description":"Specifies whether to filter by stores offering all-you-can-drink. true=filter false=do not filter"},"free_food":{"type":"boolean","title":"All-You-Can-Eat","description":"Specifies whether to filter by stores offering all-you-can-eat. true=filter false=do not filter"},"private_room":{"type":"boolean","title":"Private Room","description":"Specifies whether to filter by stores offering private rooms. true=filter false=do not filter"},"horigotatsu":{"type":"boolean","title":"Sunken Kotatsu","description":"Specifies whether to filter by stores offering sunken kotatsu seating. true=filter false=do not filter"},"tatami":{"type":"boolean","title":"Tatami","description":"Specifies whether to filter by stores offering tatami seating. true=filter false=do not filter"},"cocktail":{"type":"boolean","title":"Cocktail Selection","description":"Specifies whether to filter by stores with a wide cocktail selection. true=filter false=do not filter"},"shochu":{"type":"boolean","title":"Shochu Selection","description":"Specifies whether to filter by stores with a wide shochu selection. true=filter false=do not filter"},"sake":{"type":"boolean","title":"Sake Selection","description":"Specifies whether to filter by stores with a wide sake selection. true=filter false=do not filter"},"wine":{"type":"boolean","title":"Wine Selection","description":"Specifies whether to filter by stores with a wide wine selection. true=filter false=do not filter"},"card":{"type":"boolean","title":"Credit Cards Accepted","description":"Specifies whether to filter by stores accepting credit cards. true=filter false=do not filter"},"non_smoking":{"type":"boolean","title":"Non-Smoking","description":"Specifies whether to filter by stores offering non-smoking seats. true=filter false=do not filter"},"charter":{"type":"boolean","title":"Charter","description":"Specifies whether to filter by stores allowing private events. true=filter false=do not filter"},"ktai":{"type":"boolean","title":"Cell Phone OK","description":"Specifies whether to filter by stores allowing cell phone use. true=filter false=do not filter"},"parking":{"type":"boolean","title":"Parking Available","description":"Specifies whether to filter by stores offering parking. true=filter false=do not filter"},"barrier_free":{"type":"boolean","title":"Barrier-Free","description":"Specifies whether to filter by barrier-free accessibility. true=filter false=do not filter"},"sommelier":{"type":"boolean","title":"Sommelier","description":"Specifies whether to filter by stores with a sommelier on staff. true=filter false=do not filter"},"night_view":{"type":"boolean","title":"Night View","description":"Specifies whether to filter by stores with a nice night view. true=filter false=do not filter"},"open_air":{"type":"boolean","title":"Open Air","description":"Specifies whether to filter by open-air spaces. true=filter false=do not filter"},"show":{"type":"boolean","title":"Live Shows","description":"Specifies whether to filter by stores that offer live shows. true=filter false=do not filter"},"equipment":{"type":"boolean","title":"Entertainment Equipment","description":"Specifies whether to filter by stores with entertainment equipment. true=filter false=do not filter"},"karaoke":{"type":"boolean","title":"Karaoke","description":"Specifies whether to filter by stores with karaoke. true=filter false=do not filter"},"band":{"type":"boolean","title":"Band Performances","description":"Specifies whether to filter by stores allowing band performances. true=filter false=do not filter"},"tv":{"type":"boolean","title":"TV/Projector","description":"Specifies whether to filter by stores with TV/projector. true=filter false=do not filter"},"lunch":{"type":"boolean","title":"Lunch Available","description":"Specifies whether to filter by stores offering lunch. true=filter false=do not filter"},"midnight":{"type":"boolean","title":"Open After 11PM","description":"Specifies whether to filter by stores open after 11PM. true=filter false=do not filter"},"midnight_meal":{"type":"boolean","title":"Meals After 11PM","description":"Specifies whether to filter by stores offering meals after 11PM. true=filter false=do not filter"},"english":{"type":"boolean","title":"English Menu Available","description":"Specifies whether to filter by stores offering an English menu. true=filter false=do not filter"},"pet":{"type":"boolean","title":"Pets Allowed","description":"Specifies whether to filter by pet-friendly stores. true=filter false=do not filter"},"child":{"type":"boolean","title":"Children Allowed","description":"Specifies whether to filter by stores that allow children. true=filter false=do not filter"},"credit_card":{"items":{"type":"string"},"type":"array","title":"Credit Cards","description":"Can filter by specific credit card types. Refer to the Credit Card master for possible codes. (Added 2008/02/08)"},"order":{"type":"integer","title":"Sort Order","description":"Specifies how to sort the search results. The recommended order is updated periodically. * If searching by location"},"start":{"type":"integer","title":"Start Position","description":"Specifies which result index to begin output. Default is 1."},"count":{"type":"integer","title":"Items per Page","description":"Specifies how many results to output at once. Default is 10. Minimum 1"}},"additionalProperties":false,"type":"object"}`)
	ToolShopSearchInputSchema                   = json.RawMessage(`{"properties":{"keyword":{"items":{"type":"string"},"type":"array","title":"Keyword","description":"Search by the store's name"},"tel":{"type":"string","pattern":"^\\d{9}(\\d|\\d{2})?$","title":"Phone Number","description":"Search by the store's phone number (digits only"},"start":{"type":"integer","title":"Start Position","description":"Specifies which search result index to start from. The default is 1."},"count":{"type":"integer","title":"Items Per Page","description":"Specifies the maximum number of results to return per page. The default is 30. Minimum is 1"}},"additionalProperties":false,"type":"object"}`)
	ToolLargeAreaSearchInputSchema              = json.RawMessage(`{"properties":{"large_area":{"items":{"type":"string"},"type":"array","title":"Large Area Code","description":"Search by large area code (exact match). Up to 3 can be specified. If 4 or more are specified"},"keyword":{"items":{"type":"string"},"type":"array","title":"Keyword","description":"Search by large area name (partial match)."}},"additionalProperties":false,"type":"object"}`)
	ToolMiddleAreaSearchInputSchema             = json.RawMessage(`{"properties":{"middle_area":{"items":{"type":"string"},"type":"array","title":"Middle Area Code","description":"Search by middle area code (exact match). Up to 5 can be specified. If 6 or more are specified"},"large_area":{"items":{"type":"string"},"type":"array","title":"Large Area Code","description":"Search by large area code (exact match). Up to 3 can be specified. If 4 or more are specified"},"keyword":{"items":{"type":"string","examples":["飯田橋"]},"type":"array","title":"Keyword","description":"Search by middle area name (partial match)."},"start":{"type":"integer","title":"Start Position","description":"Specifies which result index to begin output from. Default is 1."},"count":{"type":"integer","title":"Items Per Page","description":"Specifies the maximum number of search results per page. Default is unset. Minimum is 1"}},"additionalProperties":false,"type":"object"}`)
	ToolSmallAreaSearchInputSchema              = json.RawMessage(`{"properties":{"small_area":{"items":{"type":"string"},"type":"array","title":"Small Area Code","description":"Search by small area code (exact match). Up to 5 can be specified. If 6 or more are specified"},"middle_area":{"items":{"type":"string"},"type":"array","title":"Middle Area Code","description":"Search by middle area code (exact match). Up to 5 can be specified. If 6 or more are specified"},"keyword":{"items":{"type":"string","examples":["銀座"]},"type":"array","title":"Keyword","description":"Search by small area name (partial match)."},"start":{"type":"integer","title":"Start Position","description":"Specifies which search result index to start from. Default is 1."},"count":{"type":"integer","title":"Items Per Page","description":"Specifies the maximum number of results per page. Default is unset. Minimum is 1"}},"additionalProperties":false,"type":"object"}`)
	ToolGenreSearchInputSchema                  = json.RawMessage(`{"properties":{"code":{"items":{"type":"string"},"type":"array","title":"Genre Code","description":"Search by genre code (exact match). Up to 2 can be specified. If 3 or more are specified"},"keyword":{"items":{"type":"string","examples":["バー"]},"type":"array","title":"Keyword","description":"Search by genre name (partial match)."}},"additionalProperties":false,"type":"object"}`)
	ToolDinnerBudgetMasterSearchInputSchema     = json.RawMessage(`{"properties":{"start":{"type":"integer","title":"Start Position","description":"Specifies which search result index to start from. Default is 1."},"count":{"type":"integer","title":"Items Per Page","description":"Specifies the maximum number of search results to return per page. Default is unset. Minimum is 1"}},"additionalProperties":false,"type":"object"}`)
	ToolLargeServiceAreaMasterSearchInputSchema = json.RawMessage(`{"properties":{"start":{"type":"integer","title":"Start Position","description":"Specifies which search result index to begin output from. Default is 1."},"count":{"type":"integer","title":"Items Per Page","description":"Specifies the maximum number of search results per page. Default is unset. Minimum is 1"}},"additionalProperties":false,"type":"object"}`)
	ToolServiceAreaMasterSearchInputSchema      = json.RawMessage(`{"properties":{"start":{"type":"integer","title":"Start Position","description":"Specifies which search result index to start from. Default is 1."},"count":{"type":"integer","title":"Items Per Page","description":"Specifies the maximum number of search results per page. Default is unset. Minimum is 1"}},"additionalProperties":false,"type":"object"}`)
	ToolCreditCardMasterSearchInputSchema       = json.RawMessage(`{"properties":{"start":{"type":"integer","title":"Start Position","description":"Specifies which search result index to start from. Default is 1."},"count":{"type":"integer","title":"Items Per Page","description":"Specifies the maximum number of search results per page. Default is unset. Minimum is 1"}},"additionalProperties":false,"type":"object"}`)
)

// ToolList contains all available tools.
var ToolList = []protocol.Tool{
	{
		Name:        "gourmet_search",
		Description: "Searches for gourmet information.",
		InputSchema: ToolGourmetSearchInputSchema,
	},
	{
		Name:        "shop_search",
		Description: "Searches for restaurant information.",
		InputSchema: ToolShopSearchInputSchema,
	},
	{
		Name:        "large_area_search",
		Description: "Searches for large area.",
		InputSchema: ToolLargeAreaSearchInputSchema,
	},
	{
		Name:        "middle_area_search",
		Description: "Searches for middle area.",
		InputSchema: ToolMiddleAreaSearchInputSchema,
	},
	{
		Name:        "small_area_search",
		Description: "Searches for small area.",
		InputSchema: ToolSmallAreaSearchInputSchema,
	},
	{
		Name:        "genre_search",
		Description: "Searches for genre.",
		InputSchema: ToolGenreSearchInputSchema,
	},
	{
		Name:        "dinner_budget_master_search",
		Description: "Retrieves diner_budget_master.",
		InputSchema: ToolDinnerBudgetMasterSearchInputSchema,
	},
	{
		Name:        "large_service_area_master_search",
		Description: "Retrieves large_service_area_master",
		InputSchema: ToolLargeServiceAreaMasterSearchInputSchema,
	},
	{
		Name:        "service_area_master_search",
		Description: "Retrieves service_area_master",
		InputSchema: ToolServiceAreaMasterSearchInputSchema,
	},
	{
		Name:        "credit_card_master_search",
		Description: "Retrieves credit_card_master",
		InputSchema: ToolCreditCardMasterSearchInputSchema,
	},
}

// NewHandler creates a new MCP handler.
func NewHandler(resourceHandler mcp.ServerResourceHandler, toolHandler ServerToolHandler) *mcp.Handler {
	h := &mcp.Handler{}
	h.Capabilities = protocol.ServerCapabilities{
		Resources: &protocol.ResourceCapability{
			Subscribe:   true,
			ListChanged: true,
		},
		Tools:   &protocol.ToolCapability{},
		Logging: &protocol.LoggingCapability{},
	}
	h.Implementation = protocol.Implementation{
		Name:    "HOTPEPPER GOURMET MCP Server",
		Version: "0.1.0",
	}
	h.ResourceHandler = resourceHandler
	h.ResourceTemplates = ResourceTemplateList
	h.Tools = ToolList
	h.ToolHandler = protocol.ServerHandlerFunc[protocol.CallToolRequestParams](func(ctx context.Context, method string, req protocol.CallToolRequestParams) (any, error) {
		idx := slices.IndexFunc(ToolList, func(t protocol.Tool) bool {
			return t.Name == req.Name
		})
		if idx == -1 {
			return nil, fmt.Errorf("tool not found: %s", req.Name)
		}
		switch method {
		case "tools/call":
			switch req.Name {
			case "gourmet_search":
				var in ToolGourmetSearchRequest
				if err := json.Unmarshal(req.Arguments, &in); err != nil {
					return nil, err
				}
				inputSchema, _ := ToolList[idx].InputSchema.(json.RawMessage)
				if err := protocol.ValidateByJSONSchema(string(inputSchema), in); err != nil {
					return nil, err
				}
				return toolHandler.HandleToolGourmetSearch(ctx, &in)
			case "shop_search":
				var in ToolShopSearchRequest
				if err := json.Unmarshal(req.Arguments, &in); err != nil {
					return nil, err
				}
				inputSchema, _ := ToolList[idx].InputSchema.(json.RawMessage)
				if err := protocol.ValidateByJSONSchema(string(inputSchema), in); err != nil {
					return nil, err
				}
				return toolHandler.HandleToolShopSearch(ctx, &in)
			case "large_area_search":
				var in ToolLargeAreaSearchRequest
				if err := json.Unmarshal(req.Arguments, &in); err != nil {
					return nil, err
				}
				inputSchema, _ := ToolList[idx].InputSchema.(json.RawMessage)
				if err := protocol.ValidateByJSONSchema(string(inputSchema), in); err != nil {
					return nil, err
				}
				return toolHandler.HandleToolLargeAreaSearch(ctx, &in)
			case "middle_area_search":
				var in ToolMiddleAreaSearchRequest
				if err := json.Unmarshal(req.Arguments, &in); err != nil {
					return nil, err
				}
				inputSchema, _ := ToolList[idx].InputSchema.(json.RawMessage)
				if err := protocol.ValidateByJSONSchema(string(inputSchema), in); err != nil {
					return nil, err
				}
				return toolHandler.HandleToolMiddleAreaSearch(ctx, &in)
			case "small_area_search":
				var in ToolSmallAreaSearchRequest
				if err := json.Unmarshal(req.Arguments, &in); err != nil {
					return nil, err
				}
				inputSchema, _ := ToolList[idx].InputSchema.(json.RawMessage)
				if err := protocol.ValidateByJSONSchema(string(inputSchema), in); err != nil {
					return nil, err
				}
				return toolHandler.HandleToolSmallAreaSearch(ctx, &in)
			case "genre_search":
				var in ToolGenreSearchRequest
				if err := json.Unmarshal(req.Arguments, &in); err != nil {
					return nil, err
				}
				inputSchema, _ := ToolList[idx].InputSchema.(json.RawMessage)
				if err := protocol.ValidateByJSONSchema(string(inputSchema), in); err != nil {
					return nil, err
				}
				return toolHandler.HandleToolGenreSearch(ctx, &in)
			case "dinner_budget_master_search":
				var in ToolDinnerBudgetMasterSearchRequest
				if err := json.Unmarshal(req.Arguments, &in); err != nil {
					return nil, err
				}
				inputSchema, _ := ToolList[idx].InputSchema.(json.RawMessage)
				if err := protocol.ValidateByJSONSchema(string(inputSchema), in); err != nil {
					return nil, err
				}
				return toolHandler.HandleToolDinnerBudgetMasterSearch(ctx, &in)
			case "large_service_area_master_search":
				var in ToolLargeServiceAreaMasterSearchRequest
				if err := json.Unmarshal(req.Arguments, &in); err != nil {
					return nil, err
				}
				inputSchema, _ := ToolList[idx].InputSchema.(json.RawMessage)
				if err := protocol.ValidateByJSONSchema(string(inputSchema), in); err != nil {
					return nil, err
				}
				return toolHandler.HandleToolLargeServiceAreaMasterSearch(ctx, &in)
			case "service_area_master_search":
				var in ToolServiceAreaMasterSearchRequest
				if err := json.Unmarshal(req.Arguments, &in); err != nil {
					return nil, err
				}
				inputSchema, _ := ToolList[idx].InputSchema.(json.RawMessage)
				if err := protocol.ValidateByJSONSchema(string(inputSchema), in); err != nil {
					return nil, err
				}
				return toolHandler.HandleToolServiceAreaMasterSearch(ctx, &in)
			case "credit_card_master_search":
				var in ToolCreditCardMasterSearchRequest
				if err := json.Unmarshal(req.Arguments, &in); err != nil {
					return nil, err
				}
				inputSchema, _ := ToolList[idx].InputSchema.(json.RawMessage)
				if err := protocol.ValidateByJSONSchema(string(inputSchema), in); err != nil {
					return nil, err
				}
				return toolHandler.HandleToolCreditCardMasterSearch(ctx, &in)
			default:
				return nil, fmt.Errorf("tool not found: %s", req.Name)
			}
		default:
			return nil, fmt.Errorf("method %s not found", method)
		}
	})
	return h
}
