// Code generated by mcp-codegen. DO NOT EDIT.
package mcpgen

import (
	"context"
	"encoding/json"
	"fmt"
	"slices"

	mcp "github.com/ktr0731/go-mcp"
	"github.com/ktr0731/go-mcp/protocol"
)

// ServerPromptHandler is the interface for prompt handlers.
type ServerPromptHandler interface {
}

// ResourceTemplateList contains all available ResourceTemplates.
var ResourceTemplateList = []mcp.ResourceTemplate{
	{
		URITemplate: "https://webservice.recruit.co.jp/hotpepper/budget/v1/",
		Name:        "dinner_budget_master",
		Description: "ディナー予算マスタ",
		MimeType:    "application/json",
	},
	{
		URITemplate: "https://webservice.recruit.co.jp/hotpepper/large_service_area/v1/",
		Name:        "large_service_area_master",
		Description: "大サービスエリアマスタ",
		MimeType:    "application/json",
	},
	{
		URITemplate: "https://webservice.recruit.co.jp/hotpepper/service_area/v1/",
		Name:        "service_area_master",
		Description: "サービスエリアマスタ",
		MimeType:    "application/json",
	},
	{
		URITemplate: "https://webservice.recruit.co.jp/hotpepper/credit_card/v1/",
		Name:        "credit_card_master",
		Description: "クレジットカードマスタ",
		MimeType:    "application/json",
	},
}

// ServerToolHandler is the interface for tool handlers.
type ServerToolHandler interface {
	HandleToolGourmetSearch(ctx context.Context, req *ToolGourmetSearchRequest) (*mcp.CallToolResult, error)
	HandleToolShopSearch(ctx context.Context, req *ToolShopSearchRequest) (*mcp.CallToolResult, error)
	HandleToolLargeAreaSearch(ctx context.Context, req *ToolLargeAreaSearchRequest) (*mcp.CallToolResult, error)
	HandleToolMiddleAreaSearch(ctx context.Context, req *ToolMiddleAreaSearchRequest) (*mcp.CallToolResult, error)
	HandleToolSmallAreaSearch(ctx context.Context, req *ToolSmallAreaSearchRequest) (*mcp.CallToolResult, error)
	HandleToolGenreSearch(ctx context.Context, req *ToolGenreSearchRequest) (*mcp.CallToolResult, error)
	HandleToolDinnerBudgetMasterSearch(ctx context.Context, req *ToolDinnerBudgetMasterSearchRequest) (*mcp.CallToolResult, error)
	HandleToolLargeServiceAreaMasterSearch(ctx context.Context, req *ToolLargeServiceAreaMasterSearchRequest) (*mcp.CallToolResult, error)
	HandleToolServiceAreaMasterSearch(ctx context.Context, req *ToolServiceAreaMasterSearchRequest) (*mcp.CallToolResult, error)
	HandleToolCreditCardMasterSearch(ctx context.Context, req *ToolCreditCardMasterSearchRequest) (*mcp.CallToolResult, error)
}

// ToolGourmetSearchRequest contains input parameters for the gourmet_search tool.
type ToolGourmetSearchRequest struct {
	ID               []string `json:"id,omitempty"`
	Name             *string  `json:"name,omitempty"`
	NameKana         *string  `json:"name_kana,omitempty"`
	NameAny          *string  `json:"name_any,omitempty"`
	Tel              *string  `json:"tel,omitempty"`
	Address          *string  `json:"address,omitempty"`
	Keyword          []string `json:"keyword,omitempty"`
	LargeServiceArea *string  `json:"large_service_area,omitempty"`
	ServiceArea      []string `json:"service_area,omitempty"`
	LargeArea        []string `json:"large_area,omitempty"`
	MiddleArea       []string `json:"middle_area,omitempty"`
	SmallArea        []string `json:"small_area,omitempty"`
	Latitude         *float64 `json:"lat,omitempty"`
	Longitude        *float64 `json:"lng,omitempty"`
	Range            *uint8   `json:"range,omitempty"`
	Datum            *string  `json:"datum,omitempty"`
	Genre            []string `json:"genre,omitempty"`
	Budget           []string `json:"budget,omitempty"`
	PartyCapacity    *uint    `json:"party_capacity,omitempty"`
	KtaiCoupon       bool     `json:"ktai_coupon,omitempty"`
	Wifi             bool     `json:"wifi,omitempty"`
	Wedding          bool     `json:"wedding,omitempty"`
	Course           bool     `json:"course,omitempty"`
	FreeDrink        bool     `json:"free_drink,omitempty"`
	FreeFood         bool     `json:"free_food,omitempty"`
	PrivateRoom      bool     `json:"private_room,omitempty"`
	Horigotatsu      bool     `json:"horigotatsu,omitempty"`
	Tatami           bool     `json:"tatami,omitempty"`
	Cocktail         bool     `json:"cocktail,omitempty"`
	Shochu           bool     `json:"shochu,omitempty"`
	Sake             bool     `json:"sake,omitempty"`
	Wine             bool     `json:"wine,omitempty"`
	Card             bool     `json:"card,omitempty"`
	NonSmoking       bool     `json:"non_smoking,omitempty"`
	Charter          bool     `json:"charter,omitempty"`
	Ktai             bool     `json:"ktai,omitempty"`
	Parking          bool     `json:"parking,omitempty"`
	BarrierFree      bool     `json:"barrier_free,omitempty"`
	Sommelier        bool     `json:"sommelier,omitempty"`
	NightView        bool     `json:"night_view,omitempty"`
	OpenAir          bool     `json:"open_air,omitempty"`
	Show             bool     `json:"show,omitempty"`
	Equipment        bool     `json:"equipment,omitempty"`
	Karaoke          bool     `json:"karaoke,omitempty"`
	Band             bool     `json:"band,omitempty"`
	TV               bool     `json:"tv,omitempty"`
	Lunch            bool     `json:"lunch,omitempty"`
	Midnight         bool     `json:"midnight,omitempty"`
	MidnightMeal     bool     `json:"midnight_meal,omitempty"`
	English          bool     `json:"english,omitempty"`
	Pet              bool     `json:"pet,omitempty"`
	Child            bool     `json:"child,omitempty"`
	CreditCard       []string `json:"credit_card,omitempty"`
	Order            *uint8   `json:"order,omitempty"`
	Start            *uint    `json:"start,omitempty"`
	Count            *uint8   `json:"count,omitempty"`
}

// ToolShopSearchRequest contains input parameters for the shop_search tool.
type ToolShopSearchRequest struct {
	Keyword []string `json:"keyword,omitempty"`
	Tel     *string  `json:"tel,omitempty"`
	Start   *uint    `json:"start,omitempty"`
	Count   *uint8   `json:"count,omitempty"`
}

// ToolLargeAreaSearchRequest contains input parameters for the large_area_search tool.
type ToolLargeAreaSearchRequest struct {
	LargeArea []string `json:"large_area,omitempty"`
	Keyword   []string `json:"keyword,omitempty"`
}

// ToolMiddleAreaSearchRequest contains input parameters for the middle_area_search tool.
type ToolMiddleAreaSearchRequest struct {
	MiddleArea []string `json:"middle_area,omitempty"`
	LargeArea  []string `json:"large_area,omitempty"`
	Keyword    []string `json:"keyword,omitempty"`
	Start      *uint    `json:"start,omitempty"`
	Count      *uint8   `json:"count,omitempty"`
}

// ToolSmallAreaSearchRequest contains input parameters for the small_area_search tool.
type ToolSmallAreaSearchRequest struct {
	SmallArea  []string `json:"small_area,omitempty"`
	MiddleArea []string `json:"middle_area,omitempty"`
	Keyword    []string `json:"keyword,omitempty"`
	Start      *uint    `json:"start,omitempty"`
	Count      *uint8   `json:"count,omitempty"`
}

// ToolGenreSearchRequest contains input parameters for the genre_search tool.
type ToolGenreSearchRequest struct {
	Code    []string `json:"code,omitempty"`
	Keyword []string `json:"keyword,omitempty"`
}

// ToolDinnerBudgetMasterSearchRequest contains input parameters for the dinner_budget_master_search tool.
type ToolDinnerBudgetMasterSearchRequest struct {
}

// ToolLargeServiceAreaMasterSearchRequest contains input parameters for the large_service_area_master_search tool.
type ToolLargeServiceAreaMasterSearchRequest struct {
}

// ToolServiceAreaMasterSearchRequest contains input parameters for the service_area_master_search tool.
type ToolServiceAreaMasterSearchRequest struct {
}

// ToolCreditCardMasterSearchRequest contains input parameters for the credit_card_master_search tool.
type ToolCreditCardMasterSearchRequest struct {
}

// PromptList contains all available prompts.
var PromptList = []protocol.Prompt{}

// JSON Schema type definitions generated from inputSchema
var (
	ToolGourmetSearchInputSchema                = json.RawMessage(`{"$schema":"https://json-schema.org/draft/2020-12/schema","properties":{"id":{"items":{"type":"string","examples":["J999999999"]},"type":"array","title":"お店ID","description":"お店に割り当てられた番号で検索します。20個まで指定可。"},"name":{"type":"string","title":"掲載店名","description":"お店の名前で検索(部分一致)します。"},"name_kana":{"type":"string","title":"掲載店名かな","description":"お店の読みかなで検索(部分一致)します。"},"name_any":{"type":"string","title":"掲載店名ORかな","description":"お店の名前または読みかな両方をOR検索(部分一致)します。"},"tel":{"type":"string","pattern":"^\\d{9","title":"電話番号","description":"お店の電話番号で検索します。半角数字(ハイフンなし)"},"address":{"type":"string","title":"住所","description":"お店の住所で検索(部分一致)します。"},"keyword":{"items":{"type":"string"},"type":"array","title":"キーワード","description":"店名かな、店名、住所、駅名、お店ジャンルキャッチ、キャッチのフリーワード検索(部分一致)が可能です。複数指定可能"},"large_service_area":{"type":"string","title":"大サービスエリアコード","description":"エリアに割り当てられたコード番号で検索します。指定できるコード番号は大サービスエリアマスタを参照。"},"service_area":{"items":{"type":"string"},"type":"array","title":"サービスエリアコード","description":"3個まで指定可。指定できるコード番号はサービスエリアマスタを参照。"},"large_area":{"items":{"type":"string"},"type":"array","title":"大エリアコード","description":"3個まで指定可。指定できるコードについては大エリアマスタを参照。"},"middle_area":{"items":{"type":"string"},"type":"array","title":"中エリアコード","description":"5個まで指定可。指定できるコードについてはエリアマスタを参照。"},"small_area":{"items":{"type":"string"},"type":"array","title":"小エリアコード","description":"5個まで指定可。指定できるコードについては小エリアマスタを参照。"},"lat":{"type":"number","title":"緯度","description":"ある地点からの範囲内のお店の検索を行う場合の緯度です。"},"lng":{"type":"number","title":"経度","description":"ある地点からの範囲内のお店の検索を行う場合の経度です。"},"range":{"type":"integer","title":"検索範囲","description":"ある地点からの範囲内のお店の検索を行う場合の範囲を5段階で指定できます。たとえば300m以内の検索ならrange=1を指定します 1=300m 2=500m 3=1000m (初期値)4=2000m 5=3000m","examples":[1]},"datum":{"type":"string","title":"測地系","description":"緯度・経度の測地系を指定できます。world: 世界測地系、tokyo: 旧日本測地系。初期値は world。"},"genre":{"items":{"type":"string"},"type":"array","title":"お店ジャンルコード","description":"お店のジャンル(サブジャンル含む)で絞込むことができます。指定できるコードについてはジャンルマスタ参照"},"budget":{"items":{"type":"string"},"type":"array","title":"検索用ディナー予算コード","description":"ディナー予算で絞り込むことができます。指定できるコードについてはディナー予算マスタ参照"},"party_capacity":{"type":"integer","title":"宴会収容人数","description":"宴会収容人数で絞り込むことができます。指定数より大きな収容人数のお店を検索します"},"ktai_coupon":{"type":"boolean","title":"携帯クーポン掲載","description":"携帯クーポンの有無で絞り込み条件を指定します。true=絞り込む false=絞り込まない"},"wifi":{"type":"boolean","title":"WiFi 有無","description":"WiFi 経由によるインターネット利用が可能なお店を絞り込みます。true=絞り込む false=絞り込まない"},"wedding":{"type":"boolean","title":"ウェディング二次会等","description":"ウェディング・二次会等のお問い合わせが可能なお店を絞り込みます。true=絞り込む false=絞り込まない"},"course":{"type":"boolean","title":"コースあり","description":"「コースあり」という条件で絞り込むかどうかを指定します。true=絞り込む false=絞り込まない"},"free_drink":{"type":"boolean","title":"飲み放題","description":"「飲み放題」という条件で絞り込むかどうかを指定します。true=絞り込む false=絞り込まない"},"free_food":{"type":"boolean","title":"食べ放題","description":"「食べ放題」という条件で絞り込むかどうかを指定します。true=絞り込む false=絞り込まない"},"private_room":{"type":"boolean","title":"個室あり","description":"「個室あり」という条件で絞り込むかどうかを指定します。true=絞り込む false=絞り込まない"},"horigotatsu":{"type":"boolean","title":"掘りごたつあり","description":"「掘りごたつあり」という条件で絞り込むかどうかを指定します。true=絞り込む false=絞り込まない"},"tatami":{"type":"boolean","title":"座敷あり","description":"「座敷あり」という条件で絞り込むかどうかを指定します。true=絞り込む false=絞り込まない"},"cocktail":{"type":"boolean","title":"カクテル充実","description":"「カクテル充実」という条件で絞り込むかどうかを指定します。true=絞り込む false=絞り込まない"},"shochu":{"type":"boolean","title":"焼酎充実","description":"「焼酎充実」という条件で絞り込むかどうかを指定します。true=絞り込む false=絞り込まない"},"sake":{"type":"boolean","title":"日本酒充実","description":"「日本酒充実」という条件で絞り込むかどうかを指定します。true=絞り込む false=絞り込まない"},"wine":{"type":"boolean","title":"ワイン充実","description":"「ワイン充実」という条件で絞り込むかどうかを指定します。true=絞り込む false=絞り込まない"},"card":{"type":"boolean","title":"カード可","description":"「カード可」という条件で絞り込むかどうかを指定します。true=絞り込む false=絞り込まない"},"non_smoking":{"type":"boolean","title":"禁煙席","description":"「禁煙席」という条件で絞り込むかどうかを指定します。true=絞り込む false=絞り込まない"},"charter":{"type":"boolean","title":"貸切","description":"「貸切可」という条件で絞り込むかどうかを指定します。true=絞り込む false=絞り込まない"},"ktai":{"type":"boolean","title":"携帯電話OK","description":"「携帯電話OK」という条件で絞り込むかどうかを指定します。true=絞り込む false=絞り込まない"},"parking":{"type":"boolean","title":"駐車場あり","description":"「駐車場あり」という条件で絞り込むかどうかを指定します。true=絞り込む false=絞り込まない"},"barrier_free":{"type":"boolean","title":"バリアフリー","description":"「バリアフリー」という条件で絞り込むかどうかを指定します。true=絞り込む false=絞り込まない"},"sommelier":{"type":"boolean","title":"ソムリエがいる","description":"「ソムリエがいる」という条件で絞り込むかどうかを指定します。true=絞り込む false=絞り込まない"},"night_view":{"type":"boolean","title":"夜景がキレイ","description":"「夜景がキレイ」という条件で絞り込むかどうかを指定します。true=絞り込む false=絞り込まない"},"open_air":{"type":"boolean","title":"オープンエア","description":"「オープンエア」という条件で絞り込むかどうかを指定します。true=絞り込む false=絞り込まない"},"show":{"type":"boolean","title":"ライブ・ショーあり","description":"「ライブ・ショーあり」という条件で絞り込むかどうかを指定します。true=絞り込む false=絞り込まない"},"equipment":{"type":"boolean","title":"エンタメ設備","description":"「エンタメ設備」という条件で絞り込むかどうかを指定します。true=絞り込む false=絞り込まない"},"karaoke":{"type":"boolean","title":"カラオケあり","description":"「カラオケあり」という条件で絞り込むかどうかを指定します。true=絞り込む false=絞り込まない"},"band":{"type":"boolean","title":"バンド演奏可","description":"「バンド演奏可」という条件で絞り込むかどうかを指定します。true=絞り込む false=絞り込まない"},"tv":{"type":"boolean","title":"TV・プロジェクター","description":"「TV・プロジェクター」という条件で絞り込むかどうかを指定します。true=絞り込む false=絞り込まない"},"lunch":{"type":"boolean","title":"ランチあり","description":"「ランチあり」という条件で絞り込むかどうかを指定します。true=絞り込む false=絞り込まない"},"midnight":{"type":"boolean","title":"23時以降も営業","description":"「23時以降も営業」という条件で絞り込むかどうかを指定します。true=絞り込む false=絞り込まない"},"midnight_meal":{"type":"boolean","title":"23時以降食事OK","description":"「23時以降食事OK」という条件で絞り込むかどうかを指定します。true=絞り込む false=絞り込まない"},"english":{"type":"boolean","title":"英語メニューあり","description":"「英語メニューあり」という条件で絞り込むかどうかを指定します。true=絞り込む false=絞り込まない"},"pet":{"type":"boolean","title":"ペット可","description":"「ペット可」という条件で絞り込むかどうかを指定します。true=絞り込む false=絞り込まない"},"child":{"type":"boolean","title":"お子様連れOK","description":"「お子様連れOK」という条件で絞り込むかどうかを指定します。true=絞り込む false=絞り込まない"},"credit_card":{"items":{"type":"string"},"type":"array","title":"クレジットカード","description":"クレジットカードの種別ごとに絞り込むことができます。指定できるコードについてはクレジットカードマスタ参照。(2008/02/08追加)"},"order":{"type":"integer","title":"ソート順","description":"検索結果の並び順を指定します。おススメ順は定期的に更新されます。 ※ 位置検索の場合、「4:オススメ順」以外は指定に関係なく、強制的に距離順でソートされます。 1:店名かな順 2:ジャンルコード順 3:小エリアコード順 4:おススメ順 初期値はおススメ順。位置から検索を行った場合は距離順"},"start":{"type":"integer","title":"検索の開始位置","description":"検索結果の何件目から出力するかを指定します。初期値は1。"},"count":{"type":"integer","title":"1ページあたりの取得数","description":"検索結果の最大出力データ数を指定します。初期値は10。最小1、最大100。"}},"additionalProperties":false,"type":"object"}`)
	ToolShopSearchInputSchema                   = json.RawMessage(`{"$schema":"https://json-schema.org/draft/2020-12/schema","properties":{"keyword":{"items":{"type":"string"},"type":"array","title":"キーワード","description":"お店の名前・読みがな・住所で検索（部分一致）します。複数指定可能"},"tel":{"type":"string","pattern":"^\\d{9","title":"電話番号","description":"お店の電話番号で検索します。半角数字(ハイフンなし)"},"start":{"type":"integer","title":"検索の開始位置","description":"検索結果の何件目から出力するかを指定します。初期値は1。"},"count":{"type":"integer","title":"1ページあたりの取得数","description":"検索結果の最大出力データ数を指定します。初期値は30。最小1、最大30。"}},"additionalProperties":false,"type":"object"}`)
	ToolLargeAreaSearchInputSchema              = json.RawMessage(`{"$schema":"https://json-schema.org/draft/2020-12/schema","properties":{"large_area":{"items":{"type":"string"},"type":"array","title":"大エリアコード","description":"大エリアコードで検索(完全一致)します。（3個まで指定可、4個以上指定すると4個目以降無視します）。"},"keyword":{"items":{"type":"string"},"type":"array","title":"キーワード","description":"大エリア名で検索(部分一致)します。"}},"additionalProperties":false,"type":"object"}`)
	ToolMiddleAreaSearchInputSchema             = json.RawMessage(`{"$schema":"https://json-schema.org/draft/2020-12/schema","properties":{"middle_area":{"items":{"type":"string","examples":["Y005"]},"type":"array","title":"中エリアコード","description":"中エリアコードで検索(完全一致)します。（5個まで指定可、6個以上指定すると6個目以降無視します）。"},"large_area":{"items":{"type":"string","examples":["Z011"]},"type":"array","title":"大エリアコード","description":"大エリアコードで検索(完全一致)します。（3個まで指定可、4個以上指定すると4個目以降無視します）。"},"keyword":{"items":{"type":"string","examples":["飯田橋"]},"type":"array","title":"キーワード","description":"中エリア名で検索(部分一致)します。"},"start":{"type":"integer","title":"検索の開始位置","description":"検索結果の何件目から出力するかを指定します。初期値:1"},"count":{"type":"integer","title":"1ページあたりの取得数","description":"検索結果の最大出力データ数を指定します。初期値：なし。最小1、最大：なし（すべて取得）"}},"additionalProperties":false,"type":"object"}`)
	ToolSmallAreaSearchInputSchema              = json.RawMessage(`{"$schema":"https://json-schema.org/draft/2020-12/schema","properties":{"small_area":{"items":{"type":"string","examples":["X005"]},"type":"array","title":"小エリアコード","description":"小エリアコードで検索(完全一致)します。（5個まで指定可、6個以上指定すると6個目以降無視します）。"},"middle_area":{"items":{"type":"string","examples":["Y005"]},"type":"array","title":"中エリアコード","description":"中エリアコードで検索(完全一致)します。（5個まで指定可、6個以上指定すると6個目以降無視します）。"},"keyword":{"items":{"type":"string","examples":["銀座"]},"type":"array","title":"キーワード","description":"小エリア名で検索(部分一致)します。"},"start":{"type":"integer","title":"検索の開始位置","description":"検索結果の何件目から出力するかを指定します。初期値:1"},"count":{"type":"integer","title":"1ページあたりの取得数","description":"検索結果の最大出力データ数を指定します。初期値：なし。最小1、最大：なし（すべて取得）"}},"additionalProperties":false,"type":"object"}`)
	ToolGenreSearchInputSchema                  = json.RawMessage(`{"$schema":"https://json-schema.org/draft/2020-12/schema","properties":{"code":{"items":{"type":"string","examples":["G002"]},"type":"array","title":"ジャンルコード","description":"ジャンルコードで検索(完全一致)します。（２個まで指定可、3個以上指定すると3個目以降無視します）。"},"keyword":{"items":{"type":"string","examples":["バー"]},"type":"array","title":"キーワード","description":"ジャンル名で検索(部分一致)します。"}},"additionalProperties":false,"type":"object"}`)
	ToolDinnerBudgetMasterSearchInputSchema     = json.RawMessage(`{"$schema":"https://json-schema.org/draft/2020-12/schema","properties":{},"additionalProperties":false,"type":"object"}`)
	ToolLargeServiceAreaMasterSearchInputSchema = json.RawMessage(`{"$schema":"https://json-schema.org/draft/2020-12/schema","properties":{},"additionalProperties":false,"type":"object"}`)
	ToolServiceAreaMasterSearchInputSchema      = json.RawMessage(`{"$schema":"https://json-schema.org/draft/2020-12/schema","properties":{},"additionalProperties":false,"type":"object"}`)
	ToolCreditCardMasterSearchInputSchema       = json.RawMessage(`{"$schema":"https://json-schema.org/draft/2020-12/schema","properties":{},"additionalProperties":false,"type":"object"}`)
)

// ToolList contains all available tools.
var ToolList = []protocol.Tool{
	{
		Name:        "gourmet_search",
		Description: "グルメを検索します",
		InputSchema: ToolGourmetSearchInputSchema,
	},
	{
		Name:        "shop_search",
		Description: "お店を検索します",
		InputSchema: ToolShopSearchInputSchema,
	},
	{
		Name:        "large_area_search",
		Description: "大エリアマスタを検索します",
		InputSchema: ToolLargeAreaSearchInputSchema,
	},
	{
		Name:        "middle_area_search",
		Description: "中エリアマスタを検索します",
		InputSchema: ToolMiddleAreaSearchInputSchema,
	},
	{
		Name:        "small_area_search",
		Description: "小エリアマスタを検索します",
		InputSchema: ToolSmallAreaSearchInputSchema,
	},
	{
		Name:        "genre_search",
		Description: "ジャンルマスタを検索します",
		InputSchema: ToolGenreSearchInputSchema,
	},
	{
		Name:        "dinner_budget_master_search",
		Description: "ディナー予算マスタを検索します",
		InputSchema: ToolDinnerBudgetMasterSearchInputSchema,
	},
	{
		Name:        "large_service_area_master_search",
		Description: "大サービスエリアマスタを検索します",
		InputSchema: ToolLargeServiceAreaMasterSearchInputSchema,
	},
	{
		Name:        "service_area_master_search",
		Description: "サービスエリアマスタを検索します",
		InputSchema: ToolServiceAreaMasterSearchInputSchema,
	},
	{
		Name:        "credit_card_master_search",
		Description: "クレジットカードマスタを検索します",
		InputSchema: ToolCreditCardMasterSearchInputSchema,
	},
}

// NewHandler creates a new MCP handler.
func NewHandler(resourceHandler mcp.ServerResourceHandler, toolHandler ServerToolHandler) *mcp.Handler {
	h := &mcp.Handler{}
	h.Capabilities = protocol.ServerCapabilities{
		Resources: &protocol.ResourceCapability{
			Subscribe:   true,
			ListChanged: true,
		},
		Tools:   &protocol.ToolCapability{},
		Logging: &protocol.LoggingCapability{},
	}
	h.Implementation = protocol.Implementation{
		Name:    "HOTPEPPER GOURMET MCP Server",
		Version: "0.1.0",
	}
	h.ResourceHandler = resourceHandler
	h.ResourceTemplates = ResourceTemplateList
	h.Tools = ToolList
	h.ToolHandler = protocol.ServerHandlerFunc[protocol.CallToolRequestParams](func(ctx context.Context, method string, req protocol.CallToolRequestParams) (any, error) {
		idx := slices.IndexFunc(ToolList, func(t protocol.Tool) bool {
			return t.Name == req.Name
		})
		if idx == -1 {
			return nil, fmt.Errorf("tool not found: %s", req.Name)
		}
		switch method {
		case "tools/call":
			switch req.Name {
			case "gourmet_search":
				var in ToolGourmetSearchRequest
				if err := json.Unmarshal(req.Arguments, &in); err != nil {
					return nil, err
				}
				inputSchema, _ := ToolList[idx].InputSchema.(json.RawMessage)
				if err := protocol.ValidateByJSONSchema(string(inputSchema), in); err != nil {
					return nil, err
				}
				return toolHandler.HandleToolGourmetSearch(ctx, &in)
			case "shop_search":
				var in ToolShopSearchRequest
				if err := json.Unmarshal(req.Arguments, &in); err != nil {
					return nil, err
				}
				inputSchema, _ := ToolList[idx].InputSchema.(json.RawMessage)
				if err := protocol.ValidateByJSONSchema(string(inputSchema), in); err != nil {
					return nil, err
				}
				return toolHandler.HandleToolShopSearch(ctx, &in)
			case "large_area_search":
				var in ToolLargeAreaSearchRequest
				if err := json.Unmarshal(req.Arguments, &in); err != nil {
					return nil, err
				}
				inputSchema, _ := ToolList[idx].InputSchema.(json.RawMessage)
				if err := protocol.ValidateByJSONSchema(string(inputSchema), in); err != nil {
					return nil, err
				}
				return toolHandler.HandleToolLargeAreaSearch(ctx, &in)
			case "middle_area_search":
				var in ToolMiddleAreaSearchRequest
				if err := json.Unmarshal(req.Arguments, &in); err != nil {
					return nil, err
				}
				inputSchema, _ := ToolList[idx].InputSchema.(json.RawMessage)
				if err := protocol.ValidateByJSONSchema(string(inputSchema), in); err != nil {
					return nil, err
				}
				return toolHandler.HandleToolMiddleAreaSearch(ctx, &in)
			case "small_area_search":
				var in ToolSmallAreaSearchRequest
				if err := json.Unmarshal(req.Arguments, &in); err != nil {
					return nil, err
				}
				inputSchema, _ := ToolList[idx].InputSchema.(json.RawMessage)
				if err := protocol.ValidateByJSONSchema(string(inputSchema), in); err != nil {
					return nil, err
				}
				return toolHandler.HandleToolSmallAreaSearch(ctx, &in)
			case "genre_search":
				var in ToolGenreSearchRequest
				if err := json.Unmarshal(req.Arguments, &in); err != nil {
					return nil, err
				}
				inputSchema, _ := ToolList[idx].InputSchema.(json.RawMessage)
				if err := protocol.ValidateByJSONSchema(string(inputSchema), in); err != nil {
					return nil, err
				}
				return toolHandler.HandleToolGenreSearch(ctx, &in)
			case "dinner_budget_master_search":
				var in ToolDinnerBudgetMasterSearchRequest
				if err := json.Unmarshal(req.Arguments, &in); err != nil {
					return nil, err
				}
				inputSchema, _ := ToolList[idx].InputSchema.(json.RawMessage)
				if err := protocol.ValidateByJSONSchema(string(inputSchema), in); err != nil {
					return nil, err
				}
				return toolHandler.HandleToolDinnerBudgetMasterSearch(ctx, &in)
			case "large_service_area_master_search":
				var in ToolLargeServiceAreaMasterSearchRequest
				if err := json.Unmarshal(req.Arguments, &in); err != nil {
					return nil, err
				}
				inputSchema, _ := ToolList[idx].InputSchema.(json.RawMessage)
				if err := protocol.ValidateByJSONSchema(string(inputSchema), in); err != nil {
					return nil, err
				}
				return toolHandler.HandleToolLargeServiceAreaMasterSearch(ctx, &in)
			case "service_area_master_search":
				var in ToolServiceAreaMasterSearchRequest
				if err := json.Unmarshal(req.Arguments, &in); err != nil {
					return nil, err
				}
				inputSchema, _ := ToolList[idx].InputSchema.(json.RawMessage)
				if err := protocol.ValidateByJSONSchema(string(inputSchema), in); err != nil {
					return nil, err
				}
				return toolHandler.HandleToolServiceAreaMasterSearch(ctx, &in)
			case "credit_card_master_search":
				var in ToolCreditCardMasterSearchRequest
				if err := json.Unmarshal(req.Arguments, &in); err != nil {
					return nil, err
				}
				inputSchema, _ := ToolList[idx].InputSchema.(json.RawMessage)
				if err := protocol.ValidateByJSONSchema(string(inputSchema), in); err != nil {
					return nil, err
				}
				return toolHandler.HandleToolCreditCardMasterSearch(ctx, &in)
			default:
				return nil, fmt.Errorf("tool not found: %s", req.Name)
			}
		default:
			return nil, fmt.Errorf("method %s not found", method)
		}
	})
	return h
}
